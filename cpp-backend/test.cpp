#include "Connect6.h"

bool DEBUG = false;
MinimaxTree* Tree;
int board[BOARD_SZ][BOARD_SZ]{  
    // 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18
    { 1, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // ROW 0
    { 0, 0, 0, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // ROW 1
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // ROW 2
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // ROW 3
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // ROW 4
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // ROW 5
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // ROW 6
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // ROW 7
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // ROW 8
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // ROW 9
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // ROW 10
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // ROW 11
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // ROW 12
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // ROW 13
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // ROW 14
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // ROW 15
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // ROW 16
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // ROW 17
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0, 0, 0, 0 }  // ROW 18
};

void test(){
  // unsigned check
  assert(score2cmp(18442469876872387361) == 3516401);
}
int main() {
  int poslist[BOARD_SZ * BOARD_SZ];
  for(int i = 0; i < BOARD_SZ*BOARD_SZ; i++) poslist[i] = i;
  sort(poslist, poslist+BOARD_SZ*BOARD_SZ,
    [](int i1, int i2) -> bool
    {
      return abs(posX(i1)-(BOARD_SZ/2))+abs(posY(i1)-(BOARD_SZ/2)) < abs(posX(i2)-(BOARD_SZ/2))+abs(posY(i2)-(BOARD_SZ/2));
    }
  ); // 중간에 가까운 것 먼저 보게 리스트를 설정

  Tree = new MinimaxTree();
  for(int i = 0; i < 19; i++){
    for(int j = 0; j < 19; j++){
      Tree->myBoard[i][j] = board[i][j];
    }
  }
  cout << score2cmp(Tree->eval1(XY2pos(0,5), 2));
}







